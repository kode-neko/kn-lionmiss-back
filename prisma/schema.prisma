generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model address {
  id                      Int     @id @default(autoincrement()) @db.UnsignedMediumInt
  user                    Int     @db.UnsignedMediumInt
  alias                   String  @db.VarChar(50)
  name                    String  @db.VarChar(100)
  surname                 String  @db.VarChar(100)
  address                 String  @db.VarChar(150)
  city                    String  @db.VarChar(100)
  state                   String  @db.VarChar(100)
  country                 String  @db.VarChar(100)
  phone                   String? @db.Char(23)
  obs                     String? @db.Text
  user_address_userTouser user    @relation("address_userTouser", fields: [user], references: [id], onDelete: Cascade, map: "address_ibfk_1")

  @@index([user], map: "user")
}

model area {
  id                                   Int            @id @default(autoincrement()) @db.UnsignedMediumInt
  name                                 String         @db.VarChar(100)
  country                              String         @db.VarChar(100)
  locale                               String         @db.Char(6)
  currency                             String         @db.Char(1)
  dateFormat                           String         @db.VarChar(50)
  gen                                  Boolean
  article_area_article_area_areaToarea article_area[] @relation("article_area_areaToarea")
  user_user_areaToarea                 user[]         @relation("user_areaToarea")
}

model article {
  id                                                   Int                 @id @default(autoincrement()) @db.UnsignedMediumInt
  discolor                                             Boolean
  article_area_article_area_articleToarticle           article_area[]      @relation("article_area_articleToarticle")
  article_instruct_article_instruct_articleToarticle   article_instruct[]  @relation("article_instruct_articleToarticle")
  article_materials_article_materials_articleToarticle article_materials[] @relation("article_materials_articleToarticle")
  article_tag_article_tag_articleToarticle             article_tag[]       @relation("article_tag_articleToarticle")
  article_variant_article_variant_articleToarticle     article_variant[]   @relation("article_variant_articleToarticle")
  cart_line_cart_line_articleToarticle                 cart_line[]         @relation("cart_line_articleToarticle")
  comment_comment_articleToarticle                     comment[]           @relation("comment_articleToarticle")
  picture_article_picture_article_articleToarticle     picture_article[]   @relation("picture_article_articleToarticle")
  shipping_line_shipping_line_articleToarticle         shipping_line[]     @relation("shipping_line_articleToarticle")
  user_favs_user_favs_articleToarticle                 user_favs[]         @relation("user_favs_articleToarticle")
}

model article_area {
  id                                                                   Int                    @id @default(autoincrement()) @db.UnsignedMediumInt
  article                                                              Int                    @db.UnsignedMediumInt
  title                                                                String                 @db.TinyText
  descrip                                                              String?                @db.Text
  price                                                                Decimal                @db.Decimal(6, 2)
  tax                                                                  Decimal                @db.Decimal(4, 2)
  area                                                                 Int                    @db.UnsignedMediumInt
  article_article_area_articleToarticle                                article                @relation("article_area_articleToarticle", fields: [article], references: [id], onDelete: Cascade, map: "article_area_ibfk_1")
  area_article_area_areaToarea                                         area                   @relation("article_area_areaToarea", fields: [area], references: [id], onDelete: Cascade, map: "article_area_ibfk_2")
  article_area_variant_article_area_variant_article_areaToarticle_area article_area_variant[] @relation("article_area_variant_article_areaToarticle_area")

  @@unique([article, area], map: "article")
  @@index([area], map: "area")
}

model article_area_variant {
  article_area                                                 Int             @db.UnsignedMediumInt
  variant                                                      Int             @db.UnsignedMediumInt
  translation                                                  String          @db.VarChar(100)
  article_area_article_area_variant_article_areaToarticle_area article_area    @relation("article_area_variant_article_areaToarticle_area", fields: [article_area], references: [id], onDelete: Cascade, map: "article_area_variant_ibfk_1")
  article_variant                                              article_variant @relation(fields: [variant], references: [id], onDelete: Cascade, map: "article_area_variant_ibfk_2")

  @@id([article_area, variant])
  @@index([variant], map: "variant")
}

model article_instruct {
  article                                      Int      @db.UnsignedMediumInt
  instruct                                     String   @db.VarChar(25)
  descrip                                      String   @db.VarChar(25)
  article_article_instruct_articleToarticle    article  @relation("article_instruct_articleToarticle", fields: [article], references: [id], onDelete: Cascade, map: "article_instruct_ibfk_1")
  instruct_article_instruct_instructToinstruct instruct @relation("article_instruct_instructToinstruct", fields: [instruct], references: [name], onDelete: Cascade, map: "article_instruct_ibfk_2")

  @@id([article, instruct])
  @@index([instruct], map: "instruct")
}

model article_materials {
  article                                    Int     @db.UnsignedMediumInt
  material                                   String  @db.VarChar(50)
  percentage                                 Int
  article_article_materials_articleToarticle article @relation("article_materials_articleToarticle", fields: [article], references: [id], onDelete: Cascade, map: "article_materials_ibfk_1")

  @@id([article, material])
}

model article_tag {
  article                              Int     @db.UnsignedMediumInt
  tag                                  String  @db.VarChar(25)
  article_article_tag_articleToarticle article @relation("article_tag_articleToarticle", fields: [article], references: [id], onDelete: Cascade, map: "article_tag_ibfk_1")
  tag_article_tag_tagTotag             tag     @relation("article_tag_tagTotag", fields: [tag], references: [name], onDelete: Cascade, map: "article_tag_ibfk_2")

  @@id([article, tag])
  @@index([tag], map: "tag")
}

model article_variant {
  id                                       Int                     @id @db.UnsignedMediumInt
  article                                  Int                     @db.UnsignedMediumInt
  name                                     String                  @db.VarChar(100)
  article_area_variant                     article_area_variant[]
  article_article_variant_articleToarticle article                 @relation("article_variant_articleToarticle", fields: [article], references: [id], onDelete: Cascade, map: "article_variant_ibfk_1")
  article_variant_sizes                    article_variant_sizes[]

  @@index([article], map: "article")
}

model article_variant_sizes {
  variant         Int             @db.UnsignedMediumInt
  size            String          @db.Char(10)
  qty             Int
  article_variant article_variant @relation(fields: [variant], references: [id], onDelete: Cascade, map: "article_variant_sizes_ibfk_1")

  @@id([variant, size])
}

model cart {
  id                             Int         @id @default(autoincrement()) @db.UnsignedMediumInt
  cart_line_cart_line_cartTocart cart_line[] @relation("cart_line_cartTocart")
  user_user_cartTocart           user[]      @relation("user_cartTocart")
}

model cart_line {
  cart                               Int     @db.UnsignedMediumInt
  orderr                             Int     @db.TinyInt
  article                            Int     @db.UnsignedMediumInt
  qty                                Int     @db.TinyInt
  cart_cart_line_cartTocart          cart    @relation("cart_line_cartTocart", fields: [cart], references: [id], onDelete: Cascade, map: "cart_line_ibfk_1")
  article_cart_line_articleToarticle article @relation("cart_line_articleToarticle", fields: [article], references: [id], onDelete: Cascade, map: "cart_line_ibfk_2")

  @@id([orderr, cart, article])
  @@index([article], map: "article")
  @@index([cart], map: "cart")
}

model comment {
  id                                               Int               @id @default(autoincrement()) @db.UnsignedMediumInt
  user                                             Int               @db.UnsignedMediumInt
  article                                          Int               @db.UnsignedMediumInt
  title                                            String            @db.TinyText
  body                                             String            @db.Text
  rating                                           Int               @db.UnsignedMediumInt
  user_comment_userTouser                          user              @relation("comment_userTouser", fields: [user], references: [id], onDelete: Cascade, map: "comment_ibfk_1")
  article_comment_articleToarticle                 article           @relation("comment_articleToarticle", fields: [article], references: [id], onDelete: Cascade, map: "comment_ibfk_2")
  commentToPicture picture_comment[] @relation("picture_comment_commentTocomment")

  @@unique([user, article], map: "user")
  @@index([article], map: "article")
}

model instruct {
  name                                                 String             @id @db.VarChar(25)
  article_instruct_article_instruct_instructToinstruct article_instruct[] @relation("article_instruct_instructToinstruct")
}

model measures {
  id                           Int                   @id @default(autoincrement()) @db.UnsignedMediumInt
  shoulder                     Int?                  @db.UnsignedTinyInt
  chest                        Int?                  @db.UnsignedTinyInt
  waist                        Int?                  @db.UnsignedTinyInt
  hips                         Int?                  @db.UnsignedTinyInt
  foot                         Int?                  @db.UnsignedTinyInt
  height                       Int?                  @db.UnsignedTinyInt
  weight                       Int?                  @db.UnsignedTinyInt
  unitsHeight                  measures_unitsHeight?
  unitsWeight                  measures_unitsWeight?
  user_user_measuresTomeasures user[]                @relation("user_measuresTomeasures")
}

model picture {
  id                                               Int               @id @default(autoincrement()) @db.UnsignedMediumInt
  ext                                              String            @db.Char(3)
  src                                              String            @db.VarChar(255)
  alt                                              String            @db.Text
  picture_article_picture_article_pictureTopicture picture_article[] @relation("picture_article_pictureTopicture")
  comment picture_comment[] @relation("picture_comment_pictureTopicture")
}

model picture_article {
  article                                  Int     @db.UnsignedMediumInt
  picture                                  Int     @db.UnsignedMediumInt
  article_picture_article_articleToarticle article @relation("picture_article_articleToarticle", fields: [article], references: [id], onDelete: Cascade, map: "picture_article_ibfk_1")
  picture_picture_article_pictureTopicture picture @relation("picture_article_pictureTopicture", fields: [picture], references: [id], onDelete: Cascade, map: "picture_article_ibfk_2")

  @@id([article, picture])
  @@index([picture], map: "picture")
}

model picture_comment {
  comment                                  Int     @db.UnsignedMediumInt
  picture                                  Int     @db.UnsignedMediumInt
  conn_comment comment @relation("picture_comment_commentTocomment", fields: [comment], references: [id], onDelete: Cascade, map: "picture_comment_ibfk_1")
  commentToPicture picture @relation("picture_comment_pictureTopicture", fields: [picture], references: [id], onDelete: Cascade, map: "picture_comment_ibfk_2")

  @@id([comment, picture])
  @@index([picture], map: "picture")
}

model shipping {
  id                                               Int              @id @default(autoincrement()) @db.UnsignedMediumInt
  user                                             Int              @db.UnsignedMediumInt
  idTracking                                       String           @db.VarChar(36)
  idPayment                                        String           @db.VarChar(36)
  payment                                          shipping_payment
  user_shipping_userTouser                         user             @relation("shipping_userTouser", fields: [user], references: [id], onDelete: Cascade, map: "shipping_ibfk_1")
  shipping_line_shipping_line_shippingToshipping   shipping_line[]  @relation("shipping_line_shippingToshipping")
  shipping_state_shipping_state_shippingToshipping shipping_state[] @relation("shipping_state_shippingToshipping")

  @@index([user], map: "user")
}

model shipping_line {
  orderr                                    Int
  shipping                                  Int      @db.UnsignedMediumInt
  article                                   Int      @db.UnsignedMediumInt
  qty                                       Int      @db.TinyInt
  shipping_shipping_line_shippingToshipping shipping @relation("shipping_line_shippingToshipping", fields: [shipping], references: [id], onDelete: Cascade, map: "shipping_line_ibfk_1")
  article_shipping_line_articleToarticle    article  @relation("shipping_line_articleToarticle", fields: [article], references: [id], onDelete: Cascade, map: "shipping_line_ibfk_2")

  @@id([shipping, article])
  @@index([article], map: "article")
}

model shipping_state {
  id                                         Int                   @db.UnsignedMediumInt
  shipping                                   Int                   @db.UnsignedMediumInt
  date                                       DateTime              @db.DateTime(0)
  status                                     shipping_state_status
  shipping_shipping_state_shippingToshipping shipping              @relation("shipping_state_shippingToshipping", fields: [shipping], references: [id], onDelete: Cascade, map: "shipping_state_ibfk_1")

  @@id([id, shipping])
  @@index([shipping], map: "shipping")
}

model tag {
  name                             String        @id @db.VarChar(50)
  article_tag_article_tag_tagTotag article_tag[] @relation("article_tag_tagTotag")
}

model user {
  id                               Int         @id @default(autoincrement()) @db.UnsignedMediumInt
  userName                         String      @unique(map: "userName") @db.VarChar(100)
  pass                             String      @db.VarChar(250)
  salt                             String      @db.VarChar(250)
  email                            String      @db.VarChar(255)
  bday                             String      @db.VarChar(255)
  sex                              user_sex?
  area                             Int         @db.UnsignedMediumInt
  measures                         Int         @db.UnsignedMediumInt
  cart                             Int         @db.UnsignedMediumInt
  address_address_userTouser       address[]   @relation("address_userTouser")
  comment_comment_userTouser       comment[]   @relation("comment_userTouser")
  shipping_shipping_userTouser     shipping[]  @relation("shipping_userTouser")
  area_user_areaToarea             area        @relation("user_areaToarea", fields: [area], references: [id], onDelete: Cascade, map: "user_ibfk_1")
  measures_user_measuresTomeasures measures    @relation("user_measuresTomeasures", fields: [measures], references: [id], onDelete: Cascade, map: "user_ibfk_2")
  cart_user_cartTocart             cart        @relation("user_cartTocart", fields: [cart], references: [id], onDelete: Cascade, map: "user_ibfk_3")
  user_favs_user_favs_userTouser   user_favs[] @relation("user_favs_userTouser")

  @@index([area], map: "area")
  @@index([cart], map: "cart")
  @@index([measures], map: "measures")
}

model user_favs {
  user                               Int     @db.UnsignedMediumInt
  article                            Int     @db.UnsignedMediumInt
  user_user_favs_userTouser          user    @relation("user_favs_userTouser", fields: [user], references: [id], onDelete: Cascade, map: "user_favs_ibfk_1")
  article_user_favs_articleToarticle article @relation("user_favs_articleToarticle", fields: [article], references: [id], onDelete: Cascade, map: "user_favs_ibfk_2")

  @@id([user, article])
  @@index([article], map: "article")
}

enum shipping_state_status {
  order_recieved
  processing
  shipped
  delivering
  returned
  exception
}

enum shipping_payment {
  transfer
  card
  crypto
  paypal
}

enum user_sex {
  female
  male
}

enum measures_unitsHeight {
  cm
  inch
}

enum measures_unitsWeight {
  kg
  lb
}
